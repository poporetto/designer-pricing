{"version":3,"sources":["utils.ts","pages/pricing/components/CloudPricing.tsx","pages/pricing/components/ServerPricing.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["formatCcy","num","fraction","toLocaleString","undefined","minimumFractionDigits","handleInvalidValue","sliderVal","isNaN","useStyles","makeStyles","root","width","input","FREE_TARGETS","HIGH_AVAILABILITY_TARGETS","CloudPricing","classes","useState","valueTargets","setValueTargets","setValidTargets","vaildVal","valueMinutes","setValueMinutes","setLastTargetsSliderVal","setHaCheckboxVal","targetsPrice","isChargedTargets","calcChargedTargets","minutesPrice","isChargedMinutes","calcChargedMinutes","totalPrice","className","Slider","value","onChange","event","newValue","min","max","Input","margin","e","updateUserTargets","parseInt","target","onBlur","inputProps","step","type","newValueMinutes","setValidMinutes","href","src","alt","UNLIMITED_TARGETS","ServerPricing","LastTargetsSliderVal","unlimitedTargetsCheckboxVal","setUnlimitedTargetsCheckboxVal","renderUnlimitedTargetsChecked","FormControlLabel","control","Checkbox","checked","newUnlimitedTargetsCheckboxVal","name","label","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b644a2d4.chunk.js","sourcesContent":["// https://stackoverflow.com/a/31581206\nexport const formatCcy = (num: number, fraction: number = 2): string => {\n    return '$' + num.toLocaleString(undefined, {minimumFractionDigits: fraction});\n}\n\nexport const handleInvalidValue = (sliderVal: number): number => {\n    if (isNaN(sliderVal) || sliderVal < 1) {\n        sliderVal = 1;\n    } else if (sliderVal > 9999) {\n        sliderVal = 9999;\n    }\n    return sliderVal;\n}","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { Input, Slider} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { formatCcy, handleInvalidValue } from \"../../../utils\";\n\nconst useStyles = makeStyles({\n  root: {\n    width: 250,\n  },\n  input: {\n    width: 42, // 42\n  },\n});\n\nconst FREE_TARGETS = 10;\nconst FREE_MINUTES = 100;\nconst COST_PER_TARGET = 10;\nconst COST_PER_MINUTE = 0.03;\nconst HIGH_AVAILABILITY_TARGETS = 100;\n\nconst isChargedTargets = (valueTargets: number | string): boolean => {\n  return valueTargets > FREE_TARGETS;\n};\n\nconst isChargedMinutes = (valueMinutes: number | string): boolean => {\n  return valueMinutes > FREE_MINUTES;\n};\n\nconst CloudPricing = () => {\n  const classes = useStyles();\n\n  // Deployment Targets\n  const [valueTargets, setValueTargets] = useState(FREE_TARGETS);\n\n  const handleSliderChange = (event: any, newValue: any) => {\n    setValueTargets(newValue);\n    setLastTargetsSliderVal(valueTargets);\n  };\n\n  const handleBlur = () => {\n    if (valueTargets < 0) {\n      setValueTargets(0);\n    } else if (valueTargets > 10000) {\n      setValueTargets(10000);\n    }\n  };\n\n  // Single spot where targets slider value to be set by the user\n  const updateUserTargets = (valueTargets: number) => {\n    setValidTargets(valueTargets); // update display value\n    setLastTargetsSliderVal(valueTargets); // remember user's last value\n\n    // reset checkbox if targets slider value is not eligible to HA\n    if (valueTargets < HIGH_AVAILABILITY_TARGETS) {\n      setHaCheckboxVal(false);\n    }\n  };\n  const setValidTargets = (num: number) => {\n    let vaildVal = handleInvalidValue(num);\n    setValueTargets(vaildVal);\n  };\n\n  // Deployment minutes\n  const [valueMinutes, setValueMinutes] = useState<\n    number | string | Array<number | string>\n  >(FREE_MINUTES);\n\n  const handleSliderChangeMinutes = (\n    event: any,\n    newValueMinutes: number | number[]\n  ) => {\n    setValueMinutes(newValueMinutes);\n  };\n\n  const handleBlurMinutes = () => {\n    if (valueMinutes < 0) {\n      setValueMinutes(0);\n    } else if (valueMinutes > 10000) {\n      setValueMinutes(10000);\n    }\n  };\n  const setValidMinutes = (num: number) => {\n    let vaildVal = handleInvalidValue(num);\n    setValueMinutes(vaildVal);\n  };\n\n  // High Availablity\n  const [LastTargetsSliderVal, setLastTargetsSliderVal] = useState(\n    FREE_TARGETS\n  );\n  const [haCheckboxVal, setHaCheckboxVal] = useState(false);\n  const isEligibleHA = valueTargets >= HIGH_AVAILABILITY_TARGETS;\n  const renderHaChecked = haCheckboxVal || isEligibleHA;\n  const highAvailabilityCheck = (e: { target: { checked: any } }) => {\n    // Updating checkbox state\n    const newHaCheckboxVal = e.target.checked;\n    setHaCheckboxVal(newHaCheckboxVal);\n    // [ ] => [x]\n    if (newHaCheckboxVal) {\n      // Set high availablility value\n      if (valueTargets < HIGH_AVAILABILITY_TARGETS) {\n        setValueTargets(HIGH_AVAILABILITY_TARGETS);\n      }\n    } else {\n      // [x] => [ ]\n      // Reset to user's last input value\n      setValueTargets(LastTargetsSliderVal);\n    }\n  };\n\n  // Calculations\n  const calcChargedTargets = (valueTargets: any) => {\n    if (isChargedTargets(valueTargets)) {\n      return valueTargets - FREE_TARGETS;\n    } else {\n      return 0;\n    }\n  };\n\n  const calcChargedMinutes = (valueMinutes: any) => {\n    if (isChargedMinutes(valueMinutes)) {\n      return valueMinutes - FREE_MINUTES;\n    } else {\n      return 0;\n    }\n  };\n\n  const targetsPrice = calcChargedTargets(valueTargets) * COST_PER_TARGET;\n  const minutesPrice = calcChargedMinutes(valueMinutes) * COST_PER_MINUTE;\n  const totalPrice = targetsPrice + minutesPrice;\n\n  return (\n    <>\n      <div className=\"pricing__item pricing__item--primary\">\n        <h2 className=\"pricing__title\">\n          Cloud\n        </h2>\n        <div className=\"pricing__price\">\n          {formatCcy(totalPrice)}<sup>*</sup><span className=\"pricing__price-duration\">/month</span>\n        </div>\n        <div className=\"pricing__slider-container\">\n          <p className=\"pricing__slider-description\">\n            For{\" \"}\n            {valueTargets <= FREE_TARGETS\n              ? ` up to 10 deployment targets`\n              : \" up to \" + valueTargets + \" deployment targets \"}\n          </p>\n          <div className=\"pricing__slider\">\n            <Slider\n              value={typeof valueTargets === \"number\" ? valueTargets : 0}\n              onChange={handleSliderChange}\n              aria-labelledby=\"input-slider\"\n              min={10}\n              max={5000}\n            />\n            <Input\n              className={classes.input}\n              value={valueTargets}\n              margin=\"dense\"\n              onChange={(e) =>\n                updateUserTargets(parseInt(e.target.value, 10))\n              }\n              onBlur={handleBlur}\n              inputProps={{\n                step: 10,\n                min: 10,\n                max: 5000,\n                type: \"number\",\n                \"aria-labelledby\": \"input-slider\",\n              }}\n            />            \n          </div>\n        </div>\n        <div className=\"pricing__slider-container\">\n          <p className=\"pricing__slider-description\">\n            For{\" \"}\n            {valueMinutes <= FREE_TARGETS\n              ? ` free deployment minutes `\n              : \" \" + valueMinutes + \" deployment minutes \"}\n          </p>\n          <div className=\"pricing__slider\">\n            <Slider\n              value={typeof valueMinutes === \"number\" ? valueMinutes : 0}\n              onChange={handleSliderChangeMinutes}\n              aria-labelledby=\"input-slider-minutes\"\n              min={100}\n              max={10000}\n            />\n            <Input\n              className={classes.input}\n              value={valueMinutes}\n              margin=\"dense\"\n              onChange={(e) =>\n                setValidMinutes(parseInt(e.target.value, 10))\n              }\n              onBlur={handleBlurMinutes}\n              inputProps={{\n                step: 10,\n                min: 100,\n                max: 10000,\n                type: \"number\",\n                \"aria-labelledby\": \"input-slider-minutes\",\n              }}\n            />\n          </div>\n        </div>        \n        <p className=\"pricing__term\">\n          High availability feature included in plan with more than 100 deployment\n        </p>          \n        <a href=\"\" className=\"btn btn-lg btn-success\">\n          Start a trial\n        </a>\n        <img src=\"octopus.svg\" className=\"octopus octopus--floating\" alt=\"Octopus Floating Around\"/>\n      </div>\n    </>\n  );\n};\nexport default CloudPricing;\n","import * as React from \"react\";\nimport { useState } from \"react\";\nimport classNames from \"classnames\";\nimport { Box, Grid, Input, Slider, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { formatCcy, handleInvalidValue } from \"../../../utils\";\nimport { FormControlLabel } from \"@material-ui/core\";\nimport { Checkbox } from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n  root: {\n    width: 250,\n  },\n  input: {\n    width: 42,\n  },\n});\n\nconst FREE_TARGETS = 10;\nconst COST_PER_TARGET = 10;\nconst HIGH_AVAILABILITY_TARGETS = 100;\nconst UNLIMITED_TARGETS = 2001;\nconst UNLIMITED_PRICE = \"192,000\";\n\nconst isChargedTargets = (valueTargets: number | string): boolean => {\n  return valueTargets > FREE_TARGETS;\n};\n\nconst ServerPricing = () => {\n  // Styling\n  const classes = useStyles();\n\n  // Deployment Targets\n  const [valueTargets, setValueTargets] = useState(FREE_TARGETS);\n\n  const handleSliderChange = (event: any, newValue: any) => {\n    setValueTargets(newValue);\n    setLastTargetsSliderVal(valueTargets);\n  };\n\n  const handleBlur = () => {\n    if (valueTargets < 0) {\n      setValueTargets(0);\n    } else if (valueTargets > 10000) {\n      setValueTargets(10000);\n    }\n  };\n\n  // Single spot where targets slider value to be set by the user\n  const updateUserTargets = (valueTargets: number) => {\n    setValidTargets(valueTargets); // update display value\n    setLastTargetsSliderVal(valueTargets); // remember user's last value\n\n    // reset checkbox if targets slider value is not eligible to HA\n    if (valueTargets < HIGH_AVAILABILITY_TARGETS) {\n      setHaCheckboxVal(false);\n    }\n  };\n  const setValidTargets = (num: number) => {\n    let vaildVal = handleInvalidValue(num);\n    setValueTargets(vaildVal);\n  };\n\n  // High Availablity\n  const [LastTargetsSliderVal, setLastTargetsSliderVal] = useState(\n    FREE_TARGETS\n  );\n  const [haCheckboxVal, setHaCheckboxVal] = useState(false);\n  const isEligibleHA = valueTargets >= HIGH_AVAILABILITY_TARGETS;\n  const renderHaChecked = haCheckboxVal || isEligibleHA;\n  const highAvailabilityCheck = (e: { target: { checked: any } }) => {\n    // Updating checkbox state\n    const newHaCheckboxVal = e.target.checked;\n    setHaCheckboxVal(newHaCheckboxVal);\n    // [ ] => [x]\n    if (newHaCheckboxVal) {\n      // Set high availablility value\n      if (valueTargets < HIGH_AVAILABILITY_TARGETS) {\n        setValueTargets(HIGH_AVAILABILITY_TARGETS);\n      }\n    } else {\n      // [x] => [ ]\n      // Reset to user's last input value\n      setValueTargets(LastTargetsSliderVal);\n    }\n  };\n\n  // Unlimited Targets\n  const [\n    unlimitedTargetsCheckboxVal,\n    setUnlimitedTargetsCheckboxVal,\n  ] = useState(false);\n  const isEligibleUnlimited = valueTargets >= UNLIMITED_TARGETS;\n  const renderUnlimitedTargetsChecked =\n    unlimitedTargetsCheckboxVal || isEligibleUnlimited;\n  const unlimitedTargetsCheck = (e: { target: { checked: any } }) => {\n    // Updating checkbox state\n    const newUnlimitedTargetsCheckboxVal = e.target.checked;\n    setUnlimitedTargetsCheckboxVal(newUnlimitedTargetsCheckboxVal);\n    // [ ] => [x]\n    if (newUnlimitedTargetsCheckboxVal) {\n      // Set unlimited target value\n      if (valueTargets < UNLIMITED_TARGETS) {\n        setValueTargets(UNLIMITED_TARGETS);\n      }\n    } else {\n      // [x] => [ ]\n      // Reset to user's last input value\n      setValueTargets(LastTargetsSliderVal);\n    }\n  };\n\n  // Calculations\n  const calcChargedTargets = (valueTargets: any) => {\n    if (isChargedTargets(valueTargets)) {\n      return valueTargets - FREE_TARGETS;\n    } else {\n      return 0;\n    }\n  };\n\n  const targetsPrice = calcChargedTargets(valueTargets) * COST_PER_TARGET;\n  const totalPrice = targetsPrice;\n\n  return (\n    <>\n      <div className=\"pricing__item pricing__item--secondary\">\n        <h2 className=\"pricing__title\">\n          Server\n        </h2>\n        <div className=\"pricing__price\">\n          <span>\n            {renderUnlimitedTargetsChecked\n              ? UNLIMITED_PRICE\n              : formatCcy(totalPrice)}\n            <sup>*</sup>\n          </span>\n          <span className=\"pricing__price-duration\">/month</span>\n        </div>\n        <div className=\"pricing__slider-container\">\n          <p className=\"pricing__slider-description\">\n            For{\" \"}\n            {renderUnlimitedTargetsChecked\n              ? ` unlimited deployment targets`\n              : \" up to \" + valueTargets + \" deployment targets \"}\n          </p>\n          {renderUnlimitedTargetsChecked ? null : (\n            <div className=\"pricing__slider\">\n              <Slider\n                value={valueTargets}\n                onChange={handleSliderChange}\n                aria-labelledby=\"input-slider\"\n                min={10}\n                max={2000}\n              />\n              <Input\n                className={classes.input}\n                value={valueTargets}\n                margin=\"dense\"\n                onChange={(e) =>\n                  updateUserTargets(parseInt(e.target.value, 10))\n                }\n                onBlur={handleBlur}\n                inputProps={{\n                  step: 10,\n                  min: 10,\n                  max: 2000,\n                  type: \"number\",\n                  \"aria-labelledby\": \"input-slider\",\n                }}\n              />\n            </div>\n          )}\n        </div>\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={renderUnlimitedTargetsChecked}\n              onChange={unlimitedTargetsCheck}\n              name=\"unlimitedTargets\"\n            />\n          }\n          label=\"Unlimited Targets\"\n        />\n        <p className=\"pricing__term\">\n          High availability feature included in plan with more than 100 deployment targets.\n        </p>\n        <a href=\"\" className=\"btn btn-lg btn-success\">\n          Start a trial\n        </a>\n        <img src=\"octopus.svg\" className=\"octopus octopus--caught\" alt=\"Octopus Floating Around\"/>\n      </div>\n    </>\n  );\n};\nexport default ServerPricing;\n","import React from \"react\";\nimport \"./App.scss\";\nimport Cloud from \"./pages/pricing/components/CloudPricing\";\nimport Server from \"./pages/pricing/components/ServerPricing\";\n\nfunction App() {\n  return (\n    <article className=\"pricing\">\n      <Cloud />\n      <Server />\n    </article>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}